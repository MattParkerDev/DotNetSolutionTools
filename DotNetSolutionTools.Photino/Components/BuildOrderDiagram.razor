@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Core.Models
@using DotNetSolutionTools.Core.Models
@using GraphShape.Algorithms.Layout
@using QuikGraph.Algorithms
@using QuikGraph

<div style="width: 100%; height: 600px; border: black solid 1px">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas />
    </CascadingValue>
</div>

@code {
    [Parameter, EditorRequired]
    public List<Project> Projects { get; set; }
    
    private BlazorDiagram Diagram { get; set; } = null!;

    protected override void OnInitialized()
    {
        Diagram = new BlazorDiagram();
        var projectsWithNoDependencies = Projects.Where(p => p.DependsOn.Count == 0).ToList();
        var x = 50;
        var y = 50;

        var graph = new AdjacencyGraph<Project, Edge<Project>>();
        var graph2 = new BidirectionalGraph<Project, Edge<Project>>();
        foreach (var project in Projects)
        {
            graph.AddVertex(project);
            graph2.AddVertex(project);
        }
        foreach (var project in Projects)
        {
            foreach (var dependency in project.DependsOn)
            {
                graph.AddEdge(new Edge<Project>(project, dependency));
                graph2.AddEdge(new Edge<Project>(project, dependency));
            }
        }
        
        var layoutParameters = new SugiyamaLayoutParameters();
        //var layoutAlgorithmFactory = new StandardLayoutAlgorithmFactory<Project, Edge<Project>, AdjacencyGraph<Project, Edge<Project>>>();
        //var layoutAlgorithm = new SugiyamaLayoutAlgorithm<Project, Edge<Project>, AdjacencyGraph<Project, Edge<Project>>>(graph, layoutParameters);
        var vertexPositions2 = new Dictionary<Project, GraphShape.Point>();
        var vertexSizes = new Dictionary<Project, GraphShape.Size>();
        var layoutAlgorithm2 = new SimpleTreeLayoutAlgorithm<Project, Edge<Project>, BidirectionalGraph<Project, Edge<Project>>>(graph2, vertexPositions2, vertexSizes, null);
        layoutAlgorithm2.Compute();
        
        var vertexPositions = layoutAlgorithm2.VerticesPositions;
        foreach (var project in Projects)
        {
            var node = Diagram.Nodes.Add(new NodeModel
            {
                Title = project.Name,
                Position = new Point(x, y)
            });
        }
        foreach (var project in Projects)
        {
            var node = Diagram.Nodes.Single(n => n.Title == project.Name);
            foreach (var dependency in project.DependsOn)
            {
                var dependencyNode = Diagram.Nodes.Single(n => n.Title == dependency.Name);
                Diagram.Links.Add(new LinkModel(node, dependencyNode) { SourceMarker = LinkMarker.Arrow});
            }
        }
        
        

        foreach (var (project, point) in vertexPositions)
        {
            var diagramNode = Diagram.Nodes.Single(n => n.Title == project.Name);
            diagramNode.Position = new Point(point.X * 10, point.Y * 10);
        }
    }
    
    protected void Example2()
    {
        Diagram = new BlazorDiagram();
        foreach (var project in Projects)
        {
            var node = Diagram.Nodes.Add(new NodeModel()
            {
                Title = project.Name,
                
            });
            foreach (var dependency in project.DependsOn)
            {
                var dependencyNode = Diagram.Nodes.Add(new NodeModel()
                {
                    Title = dependency.Name
                });
                Diagram.Links.Add(new LinkModel(node, dependencyNode) { SourceMarker = LinkMarker.Arrow});
            }
        }
    }
    
    protected void Example()
    {
        Diagram = new BlazorDiagram();
        var firstNode = Diagram.Nodes.Add(new NodeModel(position: new Point(50, 50))
        {
            Title = "Node 1"
        });
        var secondNode = Diagram.Nodes.Add(new NodeModel(position: new Point(200, 100))
        {
            Title = "Node 2"
        });
        var leftPort = secondNode.AddPort(PortAlignment.Left);
        var rightPort = secondNode.AddPort(PortAlignment.Right);
        // The connection point will be the intersection of
        // a line going from the target to the center of the source
        var sourceAnchor = new ShapeIntersectionAnchor(firstNode);
        // The connection point will be the port's position
        var targetAnchor = new SinglePortAnchor(leftPort);
        var link = Diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));
    }
}